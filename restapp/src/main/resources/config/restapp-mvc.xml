<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     
 			   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

  <!--
      - This bean resolves specific types of exceptions to corresponding logical 
      - view names for error views. The default behaviour of DispatcherServlet 
      - is to propagate all exceptions to the servlet container: this will happen 
      - here with all other types of exceptions.
    --><!--
  <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="exceptionMappings">
      <props>
  	<prop key=".DataAccessException">dataAccessFailure</prop>
  	<prop key=".lang.Exception">uncaughtException</prop>
  	<prop key=".AuthenticationCredentialsNotFoundException">login</prop>
  	<prop key=".AccessDeniedException">login</prop>
      </props>
    </property>
  </bean>

  --><!-- Configures the @Controller programming model -->
  <context:annotation-config />
  <mvc:annotation-driven />
  
  <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" p:order="2">
    <property name="mediaTypes">
      <map>
	<entry key="xml" value="application/xml"/>
	<entry key="json" value="application/json"/>
      </map>
    </property>
    <property name="defaultViews">
      <list>
	<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
	  <property name="marshaller">
	    <bean class="org.springframework.oxm.xstream.XStreamMarshaller" p:autodetectAnnotations="true" />
	  </property>
	</bean>
	<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
	  <property name="renderedAttributes" value="response"/>
	</bean>
      </list>
    </property>
  </bean>

  <!-- freemarker config -->
  <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
    <property name="templateLoaderPath" value="/WEB-INF/freemarker/"/>
  </bean>

  <!-- 
    View resolvers can also be configured with ResourceBundles or XML files. If you need
    different view resolving based on Locale, you have to use the resource bundle resolver.
  -->
  <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver" p:order="1"><!--
    <property name="cache" value="true"/>
    --><property name="prefix" value=""/>
    <property name="suffix" value=".ftl"/>
    <property name="requestContextAttribute" value="rc"/>   <!-- For accessing the request context path in the templates -->
    <!-- if you want to use the Spring FreeMarker macros, set this property to true -->
    <property name="exposeSpringMacroHelpers" value="true"/>

  </bean>
  
    
  <!-- Maps request paths to @Controller classes; e.g. a path of /person looks for a controller named PersonController -->
  <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    <property name="order" value="1" />
  </bean>
  
  <!-- Dispatches requests mapped to POJO @Controllers implementations -->
  <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
  
</beans>
